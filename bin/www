#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const debug = require('debug')('app:debug');
 const http = require('http');
 const app = require('../app');
//  let workers = [];
//  let numCores = require('os').cpus().length;
 
 /**
  * Setup number of worker processes to share port which will be defined while setting up server
  */

 
 
 const setupExpress = () => {
 
     /**
      * Create HTTP server.
      */
 
     const server = http.createServer(app);
     // require('../socket')(server);
 
 
     /**
      * Get port from environment and store in Express.
      */
 
 
     const port = process.env.PORT;
     app.set('port', port);
 
     console.log("Starting", process.env.APP_NAME, port);
 
     //print all config here
     // debug("ENV", config);
     /**
      * Listen on provided port, on all networks interfaces.
      */
 
     server.listen(port);
     server.on('error', (error) => {
         onError(error, port);
     });
     server.on('listening', () => {
         const addr = server.address();
         const bind = typeof addr === 'string'
             ? 'pipe ' + addr
             : 'port ' + addr.port;
         console.log('Listening on ' + bind);
     });
 
     console.log(`Worker ${process.pid} started`);
 };
 

 
 function normalizePort(val) {
     const port = parseInt(val, 10);
 
     if (isNaN(port)) {
         // named pipe
         return val;
     }
 
     if (port >= 0) {
         // port number
         return port;
     }
 
     return false;
 }
 
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error, port) {
     if (error.syscall !== 'listen') {
         throw error;
     }
 
     const bind = typeof port === 'string'
         ? 'Pipe ' + port
         : 'Port ' + port;
 
     // handle specific listen errors with friendly messages
     switch (error.code) {
         case 'EACCES':
             console.error(bind + ' requires elevated privileges');
             process.exit(1);
             break;
         case 'EADDRINUSE':
             console.error(bind + ' is already in use');
             process.exit(1);
             break;
         default:
             throw error;
     }
 }
 setupExpress();
 